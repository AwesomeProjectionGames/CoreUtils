#pragma kernel HueShiftMain

RWTexture2D<float4> Result;
Texture2D<float4> Source;
float HueShift;
float SaturationScale;
float LuminanceScale;

[numthreads(8,8,1)]
void HueShiftMain (uint3 id : SV_DispatchThreadID)
{
    float4 color = Source[id.xy];
    float3 rgb = color.rgb;

    // Convert RGB to HSL
    float cmax = max(rgb.r, max(rgb.g, rgb.b));
    float cmin = min(rgb.r, min(rgb.g, rgb.b));
    float delta = cmax - cmin;

    float h = 0;
    if (delta > 0.0) {
        if (cmax == rgb.r)
            h = fmod((rgb.g - rgb.b) / delta, 6.0);
        else if (cmax == rgb.g)
            h = ((rgb.b - rgb.r) / delta) + 2.0;
        else
            h = ((rgb.r - rgb.g) / delta) + 4.0;

        h /= 6.0;
        if (h < 0) h += 1.0;
    }

    float l = (cmax + cmin) * 0.5;
    float s = (delta == 0.0) ? 0.0 : delta / (1.0 - abs(2.0 * l - 1.0));

    // Apply HSL adjustments
    h = fmod(h + HueShift, 1.0);
    if (h < 0) h += 1.0;
    s = clamp(s * SaturationScale, 0.0, 1.0);
    l = clamp(l * LuminanceScale, 0.0, 1.0);

    // Convert HSL back to RGB
    float c = (1.0 - abs(2.0 * l - 1.0)) * s;
    float x = c * (1.0 - abs(fmod(h * 6.0, 2.0) - 1.0));
    float m = l - c * 0.5;

    float3 out_rgb;
    if (h < 1.0/6.0) out_rgb = float3(c, x, 0);
    else if (h < 2.0/6.0) out_rgb = float3(x, c, 0);
    else if (h < 3.0/6.0) out_rgb = float3(0, c, x);
    else if (h < 4.0/6.0) out_rgb = float3(0, x, c);
    else if (h < 5.0/6.0) out_rgb = float3(x, 0, c);
    else out_rgb = float3(c, 0, x);

    Result[id.xy] = float4(out_rgb + m, color.a);
}
